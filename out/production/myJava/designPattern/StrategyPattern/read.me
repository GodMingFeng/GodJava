策略模式

定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

设计原则：找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起
把会变化的部分取出并“封装”起来，好让其他部分不会受到影响。

换句话说，如果每次新的需求一来，都会使某方面的代码发生变化，那么你就可以确定，这部分的代码需要被抽出来，和其他稳定的代码有所区分。

设计原则：针对接口编程，而不是针对实现编程。

继承的好处:让共同部分,可以复用.避免重复编程.

继承的不好:耦合性高.一旦超类添加一个新方法,子类都继承,拥有此方法,若子类相当部分不实现此方法,则要进行大批量修改.继承时,子类就不可继承其它类了.

接口的好处:解决了继承耦合性高的问题.且可让实现类,继承或实现其它类或接口.

接口的不好:不能真正实现代码的复用.可用以下的策略模式来解决.

解决方法：多态。

父类保存接口变量实现多态

设计原则： 多用组合，少用继承。